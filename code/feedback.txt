
//여러가지 클래스로 쪼개기
// 1. 상수를 클래스로 만든다. -> StaticValue
// 2. 자주 이용하는 static 함수를 찾고 만든다. (ex. 식 계산해주는 것들 ) , 여기선 없다.
// 3. 데이터를 저장할 클래스를 만든다.
// 4. main에 다른 클래스 넣지 말자 and 다른 함수(메소드)도 넣지 말자 
// 5. 입력, 계산, 출력 (최소한)으로 Class를 나눠보자
// 6. 웬만하면 public 하지 X, private 으로 하는게 좋고 (static 값 제외) / 
       public {getter setter} 함수 넣어주기 
   왜?? )) 다른팀이 막 데이터를 넣어버릴 수 있다. 
	이거를 필요한데이터만 들어갈 수 있게끔 필터를 걸어준다.


데이터 저장이 필요한것? 

	public int ticketClass; // 권종 int (1. 종합이용권 , 2. 파크이용권)
	public int ticketType; // 티켓타입 int (1. 1일권, 2. After4)
	public int citizenNum; // 주민번호 String 
	public int ticketCount; // 주문개수 int (최대 10개)
	public int preferClass; // 우대사항 int 


OrderData . class
-> 이 클래스 정보를  쓰고 수정하려면
OrderData orderItem = new OrderData();
 orderItem. ~~~

ArrayList의 데이터 타입을 클래스 타입으로 선언해주면
객체를 만들지않고 바로 접근이 가능 -> 제네릭
List< OrderData > orderList = new ArrayList<>()

오늘의 에러 : 
System.out.println(orderList.get(position).preferClass);

ArrayList (orderList) 
{ 0           ,           1          ,        2 .... }
ticketClass        ticketClass
ticketType        ticketType
citizenNum       citizenNum
 ....                      ....
 ....                      .....
이런느낌!!!